diff --git a/mkPage.py b/mkPage.py
index 7b521f8..965a7f1 100755
--- a/mkPage.py
+++ b/mkPage.py
@@ -10,13 +10,13 @@ from mkPage_cmn import *
 
 	
 # build imageAttrs object for single image
-def buildImageAttributes(srcDir, imageFilename):
-    imageAttributes = imageAttrs(srcDir, imageFilename)
-    imageAttributes.resizeImages(srcDir,imageFilename)
-    return imageAttributes
+def buildImageModels(srcDir, imageFilename):
+    imageModels = imageAttrs(srcDir, imageFilename)
+    imageModels.resizeImages(srcDir,imageFilename)
+    return imageModels
 	
 # create a list of type imag  eAttrs
-def buildImageAttributesList(srcDir):
+def buildImageModelsList(srcDir):
     print indTwo + "building image list ..."
 	# get a list of all images in the srcDir
 	# walk the list to build the imagAttrs objects
@@ -35,14 +35,14 @@ def buildImageAttributesList(srcDir):
             else:
                 print indFour + "add to list "
                 fileList.append(file)
-    imageAttributesList = []                
+    imageModelsList = []                
     for file in fileList:  
         print indThree + "processing: " + file
-        imageAttributes = buildImageAttributes(srcDir, file)
-        imageAttributesList.append(imageAttributes)
-    return imageAttributesList
+        imageModels = buildImageModels(srcDir, file)
+        imageModelsList.append(imageModels)
+    return imageModelsList
 
-def buildRouteModelList(srcDir):
+def buildRouteModelsList(srcDir):
     print indTwo + "building route list ..."
 	# get a list of all kml files in the srcDir
     fileList = []
@@ -50,37 +50,38 @@ def buildRouteModelList(srcDir):
         fileNoCase = file.upper()	
         if fileNoCase.endswith(".KML"):
             fileList.append(file)
-            print indThree + "found : " + file            
-        
+            print indThree + "found : " + file                    
     return fileList
 
-def buildPageAttributes(srcDir):
+def buildPageModel(srcDir):
     print indTwo + "parse folder's json file ..."
     jsonFile = open(srcDir + "/folder.json")
-    pageAttributes = pageAttrs(jsonFile)
-    imgModel = buildImageAttributesList(srcDir)
+    pageModels = pageAttrs(jsonFile)
+    imgModel = buildImageModelsList(srcDir)
     imgCenter = findCenter(imgModel)
-    routeModel = buildRouteModelList(srcDir)
-    # TODO: append the list to the pageAttributes object
-    pageAttributes.setImageModels(imgModel)
-    pageAttributes.setImageCenter(imgCenter)    
-    pageAttributes.setRouteModels(routeModel)    
-    return pageAttributes
+    routeModel = buildRouteModelsList(srcDir)
+    # TODO: append the list to the pageModels object
+    pageModels.setImageModels(imgModel)
+    pageModels.setImageCenter(imgCenter)    
+    pageModels.setRouteModels(routeModel)    
+    return pageModels
+
+def buildPageFiles(srcDir, pageModels):	
+    view = pageView(pageModels)
 
-def buildPageFiles(srcDir, pageAttributes):	
-    view = pageView(pageAttributes)
     bodyHtmlStr = view.buildBody()
     with open (srcDir + "/body.html", "w") as tmpFile:
         tmpFile.write(bodyHtmlStr)	
         tmpFile.close()
+
     mapHtmlStr = view.buildMap()
     with open (srcDir + "/map.html", "w") as tmpFile:
         tmpFile.write(mapHtmlStr)		
         tmpFile.close()		
+        
     indexHtmlStr = view.buildIndex()
     #print "Index shtml : ", indexHtmlStr    
     with open (srcDir + "/index.shtml", "w") as tmpFile:
-
         tmpFile.write(indexHtmlStr)		
         tmpFile.close()		
         
@@ -97,8 +98,8 @@ def main(argv):
     args = parseArgs(argv)
     print indOne + "Input: "
     print indTwo + "src directory: " +  args.srcDir	
-    pageAttributes = buildPageAttributes(args.srcDir)
-    buildPageFiles(args.srcDir, pageAttributes)
+    pageModels = buildPageModel(args.srcDir)
+    buildPageFiles(args.srcDir, pageModels)
     
 
 
diff --git a/pageAttrs.py b/pageAttrs.py
index d50c49a..8a1ba3a 100755
--- a/pageAttrs.py
+++ b/pageAttrs.py
@@ -26,7 +26,7 @@ class pageAttrs:
         return self.imageModels
 
     def setRouteModels(self, routeModels):
-        self.RouteModels = routeModels
+        self.routeModels = routeModels
 
     def getRouteModels(self):
         return self.routeModels
diff --git a/pageAttrs.pyc b/pageAttrs.pyc
index fe5d640..43bd670 100644
Binary files a/pageAttrs.pyc and b/pageAttrs.pyc differ
diff --git a/pageView.py b/pageView.py
index 8e305c1..2601067 100755
--- a/pageView.py
+++ b/pageView.py
@@ -19,7 +19,16 @@ class pageView:
         picStr = ""
         for im in self.pageModel.imageModels:
             print "Img Descr : ", im.descr
-            picStr += imageLineTemplate.format(im.imgFile, im.webFile, im.descr)
+            caption = ""
+            if im.descr != None:
+                strList = im.descr.split()
+                for strElem in strList:
+                    if "http://" in strElem:
+                        strElem = '<a href="' + strElem + '">' + strElem + '</a>'
+                    caption += strElem + " "
+            else :
+                caption = ""
+            picStr += imageLineTemplate.format(im.imgFile, im.webFile, caption)
 		
         pm = self.pageModel
         # write string into the body.html with header args
@@ -53,7 +62,7 @@ class pageView:
         with open (self.scriptDir + "/templates/pushpin.tmpl", "r") as tmplFile:
             pushpinTemplate = tmplFile.read()
 
-        print pushpinTemplate
+        #print pushpinTemplate
         ppStr = ""
         for im in self.pageModel.imageModels:
             if im.lat and im.lon:
@@ -75,11 +84,22 @@ class pageView:
         return self.mapSatHtml
         
     def buildMapRoad(self):	
-        # build string containing the pic html
+        with open (self.scriptDir + "/templates/route.tmpl", "r") as tmplFile:
+            routeTemplate = tmplFile.read()
+
+        print routeTemplate
+        rtStr = ""
+        for rtFile in self.pageModel.routeModels:
+                # strip all content from the period to end of line
+                rtVarSuffix = re.sub("\..*$", '', rtFile)
+                #print "    suffix : ", rtVarSuffix
+                rtStr += routeTemplate.format(rtVarSuffix, rtFile, "mapSat")
+    
+        # build string that renders pushpins
         with open (self.scriptDir + "/templates/pushpin.tmpl", "r") as tmplFile:
             pushpinTemplate = tmplFile.read()
 
-        print pushpinTemplate
+        #print pushpinTemplate
         ppStr = ""
         for im in self.pageModel.imageModels:
             if im.lat and im.lon:
@@ -90,14 +110,14 @@ class pageView:
                 # strip all content from the period to end of line
                 imageVarSuffix = re.sub("\..*$", '', im.imgFile)
                 print "    suffix : ", imageVarSuffix
-                ppStr += pushpinTemplate.format(im.imgFile, im.imgFile, im.lat, im.lon, im.descr, imageVarSuffix)
+                ppStr += pushpinTemplate.format(imageVarSuffix, im.imgFile, im.lat, im.lon, im.descr)
 		
         pm = self.pageModel
         # write string into the body.html with header args
         with open (self.scriptDir + "/templates/mapRoad.tmpl", "r") as tmplFile:
             mapTmpl = tmplFile.read()
         latCenter,lonCenter = self.pageModel.imageCenter
-        self.mapRoadHtml = mapTmpl.format(ppStr,latCenter,lonCenter)		
+        self.mapRoadHtml = mapTmpl.format(ppStr,latCenter,lonCenter, rtStr)		
         return self.mapRoadHtml
         
     def buildIndex(self):
diff --git a/pageView.pyc b/pageView.pyc
index 4a1d7fc..edd3a6c 100644
Binary files a/pageView.pyc and b/pageView.pyc differ
diff --git a/templates/map.tmpl b/templates/map.tmpl
index c1cd27d..02d919a 100755
--- a/templates/map.tmpl
+++ b/templates/map.tmpl
@@ -7,10 +7,24 @@
 		To view Google Maps, enable JavaScript by changing your browser options, and then 
 		try again.
     </noscript>
+    <center>
+		<div id="ft_mapSat">
+			<p> Following map shows locations where the pictures were taken.</p>
+		</div>
+	   <div id="mapSat" style="width: 800px; height: 640px"></div>
+	</center>
+    
+    <center>
+   		<div id="ft_mapRoad">
+   			<p> Following maps shows the route travelled.</p>
+        </div>
+	    <div id="mapRoad" style="width: 800px; height: 640px"></div>
+	</center>
+
  
     <script src="//maps.googleapis.com/maps/api/js?sensor=false"
             type="text/javascript"></script>
 
 {0}
-
+    
 {1}
\ No newline at end of file
diff --git a/templates/mapRoad.tmpl b/templates/mapRoad.tmpl
index 062247d..bc0b3db 100755
--- a/templates/mapRoad.tmpl
+++ b/templates/mapRoad.tmpl
@@ -1,7 +1,4 @@
 <!-- Road Map - START -->
-    <center>
-	   <div id="mapRoad" style="width: 800px; height: 640px"></div>
-	</center>
             
     <script type="text/javascript">
         function initialize() {{
@@ -13,10 +10,7 @@
             }});
             var bounds = new google.maps.LatLngBounds();
 
-            var kmlFileUrl = location.href + '/doc.kml';
-            var kmzLayer = new google.maps.KmlLayer(kmlFileUrl);
-            kmzLayer.setMap(map);
-
+{3}
             <!-- pushpins - START -->				
 		  
 {0}
diff --git a/templates/mapSat.tmpl b/templates/mapSat.tmpl
index a5acbf3..888c591 100755
--- a/templates/mapSat.tmpl
+++ b/templates/mapSat.tmpl
@@ -1,10 +1,4 @@
 <!-- Sat Map - START -->
-    <center>
-		<div id="ft_map">
-			<p>If any of the above pictures have been geotagged, then you should see pushpins marking the locations on the following map.  Note, you may need to zoom out or recenter to see the pushpins.</p>
-		</div>
-	   <div id="mapSat" style="width: 800px; height: 640px"></div>
-	</center>
             
     <script type="text/javascript">
         function initialize() {{
diff --git a/templates/pushpin.tmpl b/templates/pushpin.tmpl
index 9aace6d..40014e7 100755
--- a/templates/pushpin.tmpl
+++ b/templates/pushpin.tmpl
@@ -1,20 +1,20 @@
             // {0} map entry - START
-            var contentString{5} = '{4} <p><img SRC="./{5}_thumb.JPG"></p>';
-            var position{5} = new google.maps.LatLng({2},{3});
-            bounds.extend(position{5});
+            var contentString{0} = '{3} <p><img SRC="./{0}_thumb.JPG"></p>';
+            var position{0} = new google.maps.LatLng({1},{2});
+            bounds.extend(position{0});
             
-            var infowindow{5} = new google.maps.InfoWindow({{
-                content: contentString{5}
+            var infowindow{0} = new google.maps.InfoWindow({{
+                content: contentString{0}
             }});
 
-            var marker{5} = new google.maps.Marker({{
-                position: position{5},
-                title: '{4}',
+            var marker{0} = new google.maps.Marker({{
+                position: position{0},
+                title: '{3}',
                 map: map
             }});
 
-            google.maps.event.addListener(marker{5}, 'click', function() {{
-                infowindow{5}.open(map,marker{5});
+            google.maps.event.addListener(marker{0}, 'click', function() {{
+                infowindow{0}.open(map,marker{0});
             }});
             // {0} map entry - END
 
